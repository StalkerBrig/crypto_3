Steps for lab 3:

1) rsa-sign and rsa-validate

- rsa-sign takes a private key, a message, and an output file. It hashes the messages and then encrypts it with the private key.
  The public key that corresponds to this private key will be used in validation.
- rsa-validate takes a public key, a message, and a signature file. The signature file is the same that was created in rsa-sign.
  It uses the public key to decrypt the signature file and compares that output to the hash of the message mod N. If they are
  equal, then spit out True, otherwise False. The public key must correspond to the private key that signed the message originally.


RSA keys are generated with rsa_keygen prior to any unlocking or locking. What I've been doing is running three different rsa_keygen
commands:

./rsa-keygen -p capub -s capriv -n 3072
./rsa-keygen -p pub1 -s priv1 -n 3072 -c capriv
./rsa-keygen -p pub2 -s priv2 -n 3072 -c capriv

This will spit out 6 different files. All of the public keys have a signature from the Certificate Authority.
The CA signs with the its private key (even its own public key). capub is the -vk flag for our lock and unlock functions
as we will use it in ./rsa-validate to make sure that a public key was signed by a CA. This happens in lock.




Lock
	- Verify the integrity of the -p (unlock_pub). The -casig file for this public key is located in the same directory
	  with '-casig' appended to the name. Run:
	   ./rsa-validate -k CA_public_key -m unlock_pub -s unlock_pub-casig
	   
	   If this returns True, then unlock_pub was indeed signed by the CA and is verified.
	
	- Generate the AES key, encrypt it with the public key (unlock_pub) from -p flag 
	and sign it with the private key from r flag (lock_priv).  Everything is encrypted with 
	the AES key


	to lock: ./lock -d test1 -p unlock_pub -r lock_priv -v CA_public_key


Unlock:
	The person who can unlock it, comes in and checks to make sure the manifest sign corresponds
	to the -p public key (lock_pub).  Then they decrypt the manifest file with their 
	private key(unlock_priv).  Then decrypt everything with the AES key.

	to unlock: ./unlock -d test1 -p lock_pub -r unlock_priv -v CA_public_key
